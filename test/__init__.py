import numpy as np
from src.quadprobb import quadprogbb


def test_quadprodbb():
    Q = np.array([[19.42941344, -12.9899322, -5.1907171, -0.25782677],
                  [-12.9899322, 15.97805787, 1.87087712, -6.72150886],
                  [-5.1907171, 1.87087712, 36.99333345, -16.21139038],
                  [-0.25782677, -6.72150886, -16.21139038, 103.0762929]])

    q = np.array([-45.3553788, 26.52058282, -99.63769322, -61.59361441])

    mean_lower = np.array([4.94791667, 3.36875, 1.41666667, 0.19375])
    mean_upper = np.array([5.04375, 3.46458333, 1.5125, 0.28958333])

    solution = quadprogbb(Q, q, LB=mean_lower, UB=mean_upper)
    print(solution)


def test_quadprodbball():
    Aeq = np.array([[0, 0, 0, 0, 0, 2.43942867716086, 0, 0, 0, 0.237613187433109, 0, 0, 0, 1.26324575335546, 0,
                     3.09088852345174, 0, 0, 2.78573195602438, 0],
                    [0, 0, 0.501328724436720, 0, 0, 0.520605801557694, 0, 0, 0.369409354876806, 0, 0, 0, 0, 0, 0,
                     0.0312811742773396, 0, 0, 0, 0],
                    [1.69243754065667, 0, 0, 2.62229269975166, 0, 0, 0, 0, 0, 2.89169009876810, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 2.12483717432976, 0.435271753092182, 0, 0, 0, 0, 2.52706549411396, 0, 0, 0, 0,
                     0, 0]])
    A = np.array(
        [[0, 2.44752429701331, 0, 0, 0, 0, -1.37112054815900, 0, 0, 0, 0, -1.23266972130203, 0, 0, 0, 0, 0, 0, 0, 0],
         [1.29724064209119, 0, 0, 0, 0, 0, 0.911376451509756, 0, 0, 0, 3.34285407510663, 0, 2.79376167287728, 0, 0,
          2.40604650217582, 0, 0, 0, 0],
         [0, 0, -1.69200868332577, 0, 0, -1.56268820540614, 0, -1.46883524195168, 0, 0, 0, 0, 0, 0, 2.79010518468371, 0,
          0, 0, 0, 0],
         [0, 3.65804883742422, 0, 2.10229343445015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.20750226571862, 0],
         [0, 2.33634723794060, 0, 0, 0, -1.33787911614591, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.29504288708900, 0, 0, 0, 0],
         [0, 0, 1.84430753779555, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0271147114591837, 0, 1.92287213557464, 2.49478877862111,
          0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1.49911438872926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [2.44019396792667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.591038511512574, 0, 0, 0, 0, 0, 2.40974525017631],
         [0, 3.82359115051969, 0, 0, 0, 0, 0, 0, 0, 0, 3.20158175051150, 0, -1.48259282081902, 0.198619697915193, 0, 0,
          0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0.215192825980109, 0, 0, 2.11017083596966, 0, 0, 0, 0, 1.58764981230333, 0,
          2.73618366185143, 0, 0, 0]])
    b = np.array(
        [3.57357042906514, 2.44219501653636, 1.60666583176873, 6.40353741969375, 2.43972165025332, 3.71790141733461,
         4.86244972370059, 2.60267276416170, 5.49358434279431, 4.39136260678726])
    beq = np.array([1.01199892263442, 1.07442643450860, 0.788752741687982, 1.13621798745543])
    q = np.array(
        [0.673005193966111, 0.784995689027821, 1.26991910059774, 1.26571599658516, 0.870253237691283, 1.00416738406294,
         3.57168962114391, 2.81289289822516, 2.22295177087755, 0.737734671030613, 0.848123370129283, 0.309387232450707,
         3.65520164311827, 2.82686087078772, 2.23115586701951, 1.25371595974637, 0.664814251608603, 2.48998903711958,
         3.95173893980998, 0.681728092227533])
    Q = np.array(
        [[-14.6311655585211, 0, 0.0307520644125131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.775038288261344, 0, 0, 0, 0, 0, 0],
         [0, -8.01437109178393, -0.0530178530073202, 0, 0, 0, 0.205659224082528, -0.193352960298971, 0.0554193098158625,
          0, 0, 0, 0, -0.00210364888469160, -0.00127161048088258, -0.0212297844571926, 0, 0, 0, 0],
         [0.0307520644125131, -0.0530178530073202, -9.27180546945031, 0, 0, -0.455145782849869, -0.252585689486230,
          -1.42834868120781, 0.409396876916375, 0, 0, 0, 0, 0.162562418858550, -0.00939371784414483, -0.156829947598783,
          0, 0, 0, 0],
         [0, 0, 0, -4.86247871938621, 0, 0, 0, 0, 0, 0, 0, 0, 3.11523632230593, 0, -4.48140615832243, 0.268424912721328,
          0, 0, 0, 0],
         [0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, -0.455145782849869, 0, 0, -9.66942694181973, -0.117518884989812, 0, 0, 0, 0, 0, 0, -0.0180593302850648,
          0, 0, 0, 0, 0, 0],
         [0, 0.205659224082528, -0.252585689486230, 0, 0, -0.117518884989812, -8.35077900829832, 5.54064460995700,
          -1.58807343701388, 0, 0, 0, 0, -0.0100221260167476, 0.0364387581445496, 0.608352158877804, 0, 0, 0, 0],
         [0, -0.193352960298971, -1.42834868120781, 0, 0, 0, 5.54064460995700, -6.84568761588048, 2.59820784107735, 0,
          0, 0, 0, -0.0566741944408550, -0.0596165548290460, -0.995309985352285, 0, 0, 0, 1.18915092632438],
         [0, 0.0554193098158625, 0.409396876916375, 0, 0, 0, -1.58807343701388, 2.59820784107735, 1.06127376671862, 0,
          0, 0, 0, 0.0162440995753345, -0.0472964628111893, -0.789623651396981, 0, 0, 0, 3.61626103193412],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, -5.35700467757579, 0, 0, 0, 0, 0, 0, 0, 0, 2.31808432054541, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.550036250831636, 0, 0, 0, 0, 0, -1.58028956822619, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 3.11523632230593, 0, 0, 0, 0, 0, 0, 0, 0, -5.99250507534723, 0, 2.87109518520911, -0.171971351686828,
          0, 0, 0, 0],
         [-0.775038288261344, -0.00210364888469160, 0.162562418858550, 0, 0, -0.0180593302850648, -0.0100221260167476,
          -0.0566741944408550, 0.0162440995753345, 0, 0, 0, 0, -13.3623842698531, -0.000372725090607015,
          -0.00622271792686269, 0, 0, 0, 0],
         [0, -0.00127161048088258, -0.00939371784414483, -4.48140615832243, 0, 0, 0.0364387581445496,
          -0.0596165548290460, -0.0472964628111893, 0, 0, 0, 2.87109518520911, -0.000372725090607015, -4.13268791422736,
          0.205823218212345, 0, 0, 0, -0.0829760501365623],
         [0, -0.0212297844571926, -0.156829947598783, 0.268424912721328, 0, 0, 0.608352158877804, -0.995309985352285,
          -0.789623651396981, 0, 0, 0, -0.171971351686828, -0.00622271792686269, 0.205823218212345, -0.708757520216226,
          0, 0, 0, -1.38530130569999],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.58028956822619, 0, 0, 0, 0, 0, -4.55003625083164, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 2.31808432054541, 0, 0, 0, 0, 0, 0, 0, 0, 2.35700467757579, 0],
         [0, 0, 0, 0, 0, 0, 0, 1.18915092632438, 3.61626103193412, 0, 0, 0, 0, 0, -0.0829760501365623,
          -1.38530130569999, 0, 0, 0, -5.21922458193456]])
    LB = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    UP = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
    solution = quadprogbb(Q, q, A=A, b=b, Aeq=Aeq, beq=beq, LB=LB, UB=UP)
    print(solution)


# test_quadprodbb()
test_quadprodbball()